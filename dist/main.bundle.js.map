{"version":3,"sources":["webpack:///./src/app/model/question.ts","webpack:///./src/app/model/sequence.ts","webpack:///./src/app/course-sequence-question.service.ts","webpack:///./src/app/user.service.ts","webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/app/about/about.component.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/course.component.ts","webpack:///./src/app/course.edit.component.ts","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/question.component.ts","webpack:///./src/app/question.edit.component.ts","webpack:///./src/app/sequence.component.ts","webpack:///./src/app/sequence.edit.component.ts","webpack:///./src/app/student/student.component.ts","webpack:///./src/app/teacher/teacher.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/app/about/about.component.html","webpack:///./src/app/app.component.html","webpack:///./src/app/course.component.html","webpack:///./src/app/course.edit.component.html","webpack:///./src/app/home/home.component.html","webpack:///./src/app/login/login.component.html","webpack:///./src/app/question.component.html","webpack:///./src/app/question.edit.component.html","webpack:///./src/app/sequence.component.html","webpack:///./src/app/sequence.edit.component.html","webpack:///./src/app/student/student.component.html","webpack:///./src/app/teacher/teacher.component.html","webpack:///./src/app/model/user.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["export class Question {\n   _id:string;\n   questionTitle: string;\n   questionDescription: string;\n   questionText: string;\n   questionType: string;\n   questionAnswer: {\n      text : string,\n      javascript: string,\n      csharp: string\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/model/question.ts","export class Sequence {\n   _id: string;\n   sequenceTitle: string;\n   sequenceDescription: string;\n   questions: any[];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/model/sequence.ts","import { Injectable } from '@angular/core';\nimport { Question } from './model/question';\nimport { Sequence } from './model/sequence';\nimport { Course } from './model/course';\nimport { Http,Headers, Response } from '@angular/http';\nimport { QUESTIONS } from './mock-courses-sequences-questions';\nimport { SEQUENCES } from './mock-courses-sequences-questions'\nimport { COURSES } from './mock-courses-sequences-questions'\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class CourseSequenceQuestionService {\n\n  //serverAddress = 'http://localhost:3000';\n  serverAddress = 'https://ltc-project.herokuapp.com';\n\n\n  constructor(private http: Http) {}\n\n  currentCourse: Course;\n  currentSequence: Sequence;\n  currentQuestion : Question;\n\n   getAllQuestions() {\n   return this.http.get(this.serverAddress+'/api/question/all').map((res:Response) => res.json());\n   }\n\n  getAllCourses() {\n    return this.http.get(this.serverAddress+'/api/course/all').map((res:Response) => res.json());\n  }\n\n  addCourse(course: Course) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    console.log(course);\n    return this.http.put(this.serverAddress+'/api/course',JSON.stringify(course), {headers:headers}).map((res:Response) => res.json());\n  }\n\n  updateCourse(course: Course) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    console.log(course);\n    return this.http.post(this.serverAddress+'/api/course/'+course._id,JSON.stringify(course), {headers:headers}).map((res:Response) => res.json());\n  }\n\n  deleteCourse(course: Course) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return this.http.delete(this.serverAddress+'/api/course/'+course._id, {headers:headers}).map((res:Response) => res.json());\n  }\n\n  deleteSequence(sequence: Sequence) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return this.http.delete(this.serverAddress+'/api/sequence/'+sequence._id, {headers:headers}).map((res:Response) => res.json());\n  }\n\n  deleteQuestion(question: Question) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return this.http.delete(this.serverAddress+'/api/question/'+question._id, {headers:headers}).map((res:Response) => res.json());\n  }\n\n getQuestionByID(id:number){\n\n   let headers = new Headers();\n   headers.append('Content-Type', 'application/json');\n   return this.http.get(this.serverAddress+'/api/question/'+id,{headers:headers}).map((res:Response) => res.json());\n }\n\n  addQuestion(question: Question) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    console.log(question);\n    return this.http.put(this.serverAddress+'/api/question',JSON.stringify(question), {headers:headers}).map((res:Response) => res.json());\n  }\n\n  addSequence(sequence: Sequence) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return this.http.put(this.serverAddress+'/api/sequence',JSON.stringify(sequence), {headers:headers}).map((res:Response) => res.json());\n  }\n\n  updateSequence(sequence: Sequence) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return this.http.post(this.serverAddress+'/api/sequence/'+sequence._id,JSON.stringify(sequence), {headers:headers}).map((res:Response) => res.json());\n  }\n\n  updateQuestion(question: Question) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return this.http.post(this.serverAddress+'/api/question/'+question._id,JSON.stringify(question), {headers:headers}).map((res:Response) => res.json());\n  }\n\n  getSequenceByID(id:number) {\n\n    let headers = new Headers();\n    console.log(\"Calling sequence by ID\");\n    console.log(id);\n    headers.append('Content-Type', 'application/json');\n    return this.http.get(this.serverAddress+'/api/sequence/'+id,{headers:headers}).map((res:Response) => res.json());\n  }\n\n  getCourseByID(id:number) {\n\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return this.http.get(this.serverAddress+'/api/course/'+id,{headers:headers}).map((res:Response) => res.json());\n  }\n\n\n  getMultipleSequences(sequences : number[]) {\n\n    console.log(\"Multiple Seqeunces is being called\");\n    console.log(JSON.stringify(sequences));\n    var objectToSend = {sequences:sequences};\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return this.http.post(this.serverAddress+'/api/multiple/sequences',JSON.stringify(objectToSend), {headers:headers}).map((res:Response) => res.json());\n\n  }\n\n  getMultipleQuestions(questions: number[]) {\n\n    console.log(JSON.stringify(questions));\n    var objectToSend = {questions:questions};\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return this.http.post(this.serverAddress+'/api/multiple/questions',JSON.stringify(objectToSend), {headers:headers}).map((res:Response) => res.json());\n  }\n\n\n  isAnswerCorrect(question:Question,givenAnswer:string): boolean {\n\n    let isCorrect:boolean = false;\n    if(question.questionAnswer.text==givenAnswer) {isCorrect = true;}\n    return isCorrect;\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/course-sequence-question.service.ts","import { Injectable } from '@angular/core';\nimport { User } from './model/user';\nimport { Result } from './model/user';\nimport { Http,Headers, Response } from '@angular/http';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { Course } from './model/course';\nimport { Sequence } from './model/sequence';\n\n@Injectable()\nexport class UserService {\n\n  user: User = new User();\n  isUserLoggedIn : boolean = false;\n  router:Router;\n  currentCourseID: string;\n  currentCourseTitle: string;\n  currentSequenceID: string;\n  currentSequenceTitle: string;\n  currentQuestionID: string;\n  currentQuestionTitle: string;\n\n  //serverAddress = \"http://localhost:3000\";\n  serverAddress = 'https://ltc-project.herokuapp.com';\n\n  constructor(private http: Http,\n              router : Router) {\n    this.router = router;\n  }\n\n  loginUser(user: User) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return this.http.post(this.serverAddress+'/api/user/login/',JSON.stringify(user), {headers:headers}).map((res:Response) => res.json());\n  }\n\n\n  initiateUser(user: User) {\n   this.user = user;\n }\n\n  logOut() : void{\n    this.user=null;\n    this.isUserLoggedIn=false;\n    this.router.navigate(['home']);\n  }\n\n getCurrentUser():User {\n   return this.user;\n }\n\n //This should only be called if it's a correct answer!\n addCorrectAnswer(questionID: string,answer:string) : any {\n   let result: Result = new Result;\n   result._id = questionID;\n   result.type = \"question\";\n   result.dateTime = Date.now();\n   result.answer = answer;\n   result.courseID = this.currentCourseID;\n   result.courseTitle = this.currentCourseTitle;\n   result.sequenceID = this.currentSequenceID;\n   result.sequenceTitle = this.currentSequenceTitle;\n   result.questionID = this.currentQuestionID;\n   result.questionTitle = this.currentQuestionTitle;\n\n   this.user.results.push(result);\n\n\n   this.updateUserResultsInDatabase().subscribe(\n     data => {\n       console.log(data);\n     },\n     err => {\n       console.error(\"Error updating user's results!\");\n       return Observable.throw(err);\n     },\n     () => {\n       return true; }\n   );\n }\n\n updateUserResultsInDatabase() {\n\n   //The user results in the database must also be updated, not just the local version\n   let headers = new Headers();\n   headers.append('Content-Type', 'application/json');\n   return this.http.post(this.serverAddress+'/api/user/results/',{'_id': this.user._id, 'results': this.user.results}, {headers:headers}).map((res:Response) => res.json());\n }\n\n hasUserAlreadyAnsweredQuestion(questionID: string) :boolean{\n\n   let alreadyAnsweredQuestion = false;\n   for(let i:number =0; i< this.user.results.length; i++) {\n     if(this.user.results[i]._id == questionID) {\n       alreadyAnsweredQuestion = true;\n       break;\n     }\n   }\n   return alreadyAnsweredQuestion;\n }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/user.service.ts","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 227;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 227\n// module chunks = 1","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'about',\n  templateUrl: 'about.component.html',\n})\nexport class AboutComponent {\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/about/about.component.ts","import { Component } from '@angular/core';\n\nimport {Question} from \"./model/question\";\nimport {Sequence} from \"./model/sequence\";\nimport {Course} from \"./model/course\";\nimport { CourseSequenceQuestionService } from './course-sequence-question.service';\nimport { UserService } from './user.service';\nimport {MdIcon, MdIconRegistry} from '@angular/material';\n\n\nimport { QUESTIONS,COURSES,SEQUENCES } from './mock-courses-sequences-questions';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  providers: [CourseSequenceQuestionService, UserService],\n  viewProviders: [MdIconRegistry],\n // directives: [MdIcon]\n})\n\n\nexport class AppComponent {\n\n  userService: UserService;\n\n  constructor(private courseSequenceQuestionService:CourseSequenceQuestionService,\n              userService: UserService,\n              mdIconRegistry: MdIconRegistry) {\n    mdIconRegistry\n      .addSvgIconSetInNamespace('core', 'fonts/core-icon-set.svg')\n    this.userService = userService;\n  }\n  title = 'LTC';\n\n  ngOnInit() : void {}\n\n  logOut(): void{\n    this.userService.logOut();\n  }\n\n\n}\n\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\nimport { MaterialModule } from '@angular/material';\n\n\n\n\nimport { AppComponent } from './app.component';\nimport { StudentComponent } from './student/student.component';\nimport { TeacherComponent } from './teacher/teacher.component';\nimport { QuestionComponent } from './question.component';\nimport { QuestionEditComponent } from './question.edit.component';\nimport { CourseComponent } from './course.component';\nimport { CourseEditComponent } from './course.edit.component';\nimport { SequenceEditComponent } from './sequence.edit.component';\nimport { SequenceComponent } from './sequence.component';\nimport { AboutComponent} from './about/about.component';\nimport { LoginComponent} from './login/login.component';\nimport { HomeComponent} from './home/home.component';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst appRoutes: Routes = [\n  { path: 'student', component: StudentComponent },\n  { path: 'student/course/:courseID', component: CourseComponent },\n  { path: 'student/sequence/:sequenceID', component: SequenceComponent },\n  { path: 'student/question/:questionID', component: QuestionComponent },\n  { path: 'teacher', component: TeacherComponent },\n  { path: 'teacher/course/:courseID', component: CourseComponent },\n  { path: 'teacher/course/edit/:courseID', component: CourseEditComponent },\n  { path: 'teacher/sequence/:sequenceID', component: SequenceComponent },\n  { path: 'teacher/sequence/edit/:sequenceID', component: SequenceEditComponent },\n  { path: 'teacher/question/:questionID', component: QuestionComponent },\n  { path: 'teacher/question/edit/:questionID', component: QuestionEditComponent },\n  { path: 'question', component: QuestionComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'about', component: AboutComponent },\n  { path: 'home', component: HomeComponent },\n  { path: '',\n    redirectTo: '/home',\n    pathMatch: 'full'\n  },\n // { path: '**', component: PageNotFoundComponent }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    StudentComponent,\n    TeacherComponent,\n    QuestionComponent,\n    HomeComponent,\n    AboutComponent,\n    CourseComponent,\n    CourseEditComponent,\n    SequenceEditComponent,\n    QuestionEditComponent,\n    LoginComponent,\n    SequenceComponent,\n    QuestionComponent\n  ],\n  imports: [\n    NgbModule.forRoot(),\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpModule,\n    RouterModule.forRoot(appRoutes),\n    MaterialModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component,OnInit,Inject } from '@angular/core';\nimport { Sequence } from './model/sequence';\nimport { Course } from './model/course';\nimport { CourseSequenceQuestionService } from './course-sequence-question.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable} from 'rxjs/Rx';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { UserService} from './user.service';\n\n@Component({\n  selector: 'course',\n  templateUrl: './course.component.html',\n})\nexport class CourseComponent implements OnInit{\n\n  constructor(private route: ActivatedRoute,\n              private courseSequenceQuestionService: CourseSequenceQuestionService,\n              userService :UserService,\n              @Inject(FormBuilder) fb: FormBuilder) {\n    this.sequenceForm = fb.group({\n      title:[\"\",[Validators.required]],\n      description: [\"\",[Validators.required]],\n    });\n    this.userService= userService;\n  }\n\n  userService : UserService;\n  sequenceForm: FormGroup;\n  title = 'LTC';\n  courseID: number;\n  id: string;\n  sequencesToShow: Sequence[];\n  selectedSequence : Sequence;\n  newSequence: Sequence;\n  newSequenceID: String;\n  selectedCourse : Course;\n  response:String;\n  profile = {};\n\n  ngOnInit() {\n    let courseID = this.route.snapshot.params['courseID'];\n\n\n    this.courseSequenceQuestionService.getCourseByID(courseID).subscribe(\n      data => {\n        this.selectedCourse = data;\n        this.courseSequenceQuestionService.currentCourse = data;\n        console.log(this.selectedCourse);\n      },\n      err => {\n        console.error(\"Error getting course!\");\n        return Observable.throw(err);\n      },\n      () => {\n       this.reloadDisplay();\n        this.userService.currentCourseID = this.selectedCourse._id;\n        this.userService.currentCourseTitle = this.selectedCourse.courseTitle;\n      }\n\n    );\n\n    //console.log(this.selectedCourse.sequences);\n   // this.sequencesToShow=this.courseSequenceQuestionService.getSequencesByID(this.selectedCourse.sequences);\n   // console.log(this.sequencesToShow);\n   // this.sequencesToShow.push(this.sequences[0]);\n\n  }\n\n  createNewSequence(): void{\n   this.newSequence = new Sequence();\n  }\n\n  //After a sequence is successfully created it has to be added to the course.\n  submitNewSequence(sequence:Sequence): void{\n\n    this.courseSequenceQuestionService.addSequence(this.newSequence).subscribe(\n      data => {\n        console.log(\"The sequence was created and now data has been returned.\");\n        console.log(\"The data is:\");\n        console.log(data);\n        this.response = data;\n        this.newSequenceID = data.sequenceID;\n      },\n      err=> {\n        console.error(\"Error adding sequence\");\n        return Observable.throw(err);\n      },\n      () =>{\n        //TODO Case when sequence could not be created must be handled\n        this.selectedCourse.sequences.push(this.newSequenceID);\n        this.courseSequenceQuestionService.updateCourse(this.selectedCourse).subscribe(\n          data => {\n            console.log(data);\n            this.response = data\n          },\n          err=> {\n            console.error(\"Error adding sequence to course\");\n            return Observable.throw(err);\n          },\n          () => {\n              this.reloadDisplay();\n            this.newSequence=null;\n          }\n\n          )\n\n      }\n\n      );\n\n  }\n\n  onSelectSequence(sequence: Sequence): void {\n    this.selectedSequence = sequence;\n  }\n\n  reloadDisplay(): void {\n    this.courseSequenceQuestionService.getMultipleSequences(this.selectedCourse.sequences).subscribe(\n      data => {\n        console.log(data);\n        this.sequencesToShow = data\n      }\n    ),\n      err=> {\n        console.error(\"Error getting sequences!\");\n        return Observable.throw(err);\n      }\n\n  }\n  onDelete(sequence: Sequence): void {\n\n    this.courseSequenceQuestionService.deleteSequence(sequence).subscribe(\n      data => this.response = data,\n      err => {\n        console.error(\"Error deleting sequence!\");\n        return Observable.throw(err);\n      },\n      () => {\n        this.reloadDisplay();\n      }\n    );\n\n  }\n}\n\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/course.component.ts","import { Component,OnInit,Inject } from '@angular/core';\nimport { Sequence } from './model/sequence';\nimport { Course } from './model/course';\nimport { CourseSequenceQuestionService } from './course-sequence-question.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable} from 'rxjs/Rx';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { MaterialModule } from '@angular/material';\n\n@Component({\n  selector: 'course',\n  templateUrl: './course.edit.component.html',\n})\nexport class CourseEditComponent implements OnInit{\n\n  constructor(private route: ActivatedRoute,\n              private courseSequenceQuestionService: CourseSequenceQuestionService,\n              @Inject(FormBuilder) fb: FormBuilder) {\n    this.sequenceForm = fb.group({\n      title:[\"\",[Validators.required]],\n      description: [\"\",[Validators.required]],\n    });\n  }\n\n  sequenceForm: FormGroup;\n  title = 'LTC';\n  courseID: number;\n  id: string;\n  sequencesToShow: Sequence[];\n  selectedSequence : Sequence;\n  newSequence: Sequence;\n  newSequenceID: String;\n  selectedCourse : Course;\n  response:String;\n  profile = {};\n\n  ngOnInit() {\n    let courseID = this.route.snapshot.params['courseID'];\n\n    this.courseSequenceQuestionService.getCourseByID(courseID).subscribe(\n      data => {\n        this.selectedCourse = data;\n        this.courseSequenceQuestionService.currentCourse = data;\n        console.log(this.selectedCourse);\n      },\n      err => {\n        console.error(\"Error getting course!\");\n        return Observable.throw(err);\n      },\n      () => {\n       this.reloadDisplay();\n      }\n\n    );\n\n    //console.log(this.selectedCourse.sequences);\n   // this.sequencesToShow=this.courseSequenceQuestionService.getSequencesByID(this.selectedCourse.sequences);\n   // console.log(this.sequencesToShow);\n   // this.sequencesToShow.push(this.sequences[0]);\n\n  }\n\n  createNewSequence(): void{\n   this.newSequence = new Sequence();\n  }\n\n  //After a sequence is successfully created it has to be added to the course.\n  submitNewSequence(sequence:Sequence): void{\n\n    this.courseSequenceQuestionService.addSequence(this.newSequence).subscribe(\n      data => {\n        console.log(\"The sequence was created and now data has been returned.\");\n        console.log(\"The data is:\");\n        console.log(data);\n        this.response = data;\n        this.newSequenceID = data.sequenceID;\n      },\n      err=> {\n        console.error(\"Error adding sequence\");\n        return Observable.throw(err);\n      },\n      () =>{\n        //TODO Case when sequence could not be created must be handled\n        this.selectedCourse.sequences.push(this.newSequenceID);\n        this.courseSequenceQuestionService.updateCourse(this.selectedCourse).subscribe(\n          data => {\n            console.log(data);\n            this.response = data\n          },\n          err=> {\n            console.error(\"Error adding sequence to course\");\n            return Observable.throw(err);\n          },\n          () => {\n              this.reloadDisplay();\n            this.newSequence=null;\n          }\n\n          )\n\n      }\n\n      );\n\n  }\n\n  onSelectSequence(sequence: Sequence): void {\n    this.selectedSequence = sequence;\n  }\n\n  reloadDisplay(): void {\n    this.courseSequenceQuestionService.getMultipleSequences(this.selectedCourse.sequences).subscribe(\n      data => {\n        console.log(data);\n        this.sequencesToShow = data\n      }\n    ),\n      err=> {\n        console.error(\"Error getting sequences!\");\n        return Observable.throw(err);\n      }\n\n  }\n  onDelete(sequence: Sequence): void {\n\n    this.courseSequenceQuestionService.deleteSequence(sequence).subscribe(\n      data => this.response = data,\n      err => {\n        console.error(\"Error deleting sequence!\");\n        return Observable.throw(err);\n      },\n      () => {\n        this.reloadDisplay();\n      }\n    );\n\n  }\n\n  saveChanges():void {\n\n    this.courseSequenceQuestionService.updateCourse(this.selectedCourse).subscribe(\n      data => {\n        console.log(data);\n        this.response = data\n      },\n      err=> {\n        console.error(\"Error updating course\");\n        return Observable.throw(err);\n      },\n      () => {\n        this.reloadDisplay();\n      }\n\n    )\n  }\n}\n\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/course.edit.component.ts","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'home',\n  templateUrl: 'home.component.html',\n})\n\nexport class HomeComponent {\n\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/home.component.ts","import { Component,OnInit,Inject } from '@angular/core';\nimport { UserService } from '../user.service';\nimport {User} from \"../model/user\";\nimport { Observable} from 'rxjs/Rx';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'login',\n  templateUrl: 'login.component.html',\n})\n\nexport class LoginComponent implements OnInit{\n\n  user:User;\n  tempUser:User;\n  router: Router;\n\n  constructor(private userService: UserService,\n              router: Router)\n  {\n    this.router = router;\n  }\n\n\n\n  ngOnInit(){\n    this.tempUser=new User();\n    this.tempUser.local= {\n      userType: '',\n      firstName: '',\n      username: '',\n      password: '',\n      lastName: ''\n    }\n  }\n\n  doLogIn(): void {\n    console.log(\"Logging in\");\n    this.userService.loginUser(this.tempUser).subscribe(\n      data => {\n        console.log(\"This is what was returned in data:\")\n        console.log(data);\n        if(data.local.username!=null) {\n          this.userService.initiateUser(data);\n          this.userService.isUserLoggedIn=true;\n          console.log(this.userService.user);\n          this.tempUser=null;\n          if(this.userService.user.local.userType==\"teacher\") {this.router.navigate(['teacher']);}\n          if(this.userService.user.local.userType==\"student\") {this.router.navigate(['student']);}\n        };\n      }\n      ,\n      err => {\n        console.error(\"Error logging in!\");\n        alert(\"Could not log in\");\n        return Observable.throw(err);\n      },\n      () => {\n         }\n    );\n\n  }\n\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/login/login.component.ts","import { NgModule }       from '@angular/core';\nimport { Component,OnInit, Inject } from '@angular/core';\nimport { Question } from './model/question';\nimport { Sequence } from './model/sequence';\nimport { Course } from './model/course';\nimport { CourseSequenceQuestionService } from './course-sequence-question.service';\nimport { UserService } from './user.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Observable} from 'rxjs/Rx';\n\n\n@Component({\n  selector: 'question',\n  templateUrl: './question.component.html',\n})\nexport class QuestionComponent implements OnInit{\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private userService : UserService,\n              private courseSequenceQuestionService: CourseSequenceQuestionService,\n              @Inject(FormBuilder) fb: FormBuilder) {\n    this.questionForm = fb.group({\n      answer: [\"\",[Validators.required]],\n    });\n    this.router = router;\n  }\n  title = 'LTC';\n  id: string;\n  questionForm: FormGroup;\n  questions : Question[];\n  selectedQuestion : Question;\n  feedback : String;\n  alreadyCorrect: boolean = false;\n\n  ngOnInit() {\n    let questionID = this.route.snapshot.params['questionID'];\n\n    this.courseSequenceQuestionService.getQuestionByID(questionID).subscribe(\n      data => {\n        this.selectedQuestion = data;\n        this.courseSequenceQuestionService.currentQuestion = data;\n        this.userService.currentQuestionID=this.selectedQuestion._id;\n        this.userService.currentQuestionTitle=this.selectedQuestion.questionTitle;\n        this.alreadyCorrect = this.userService.hasUserAlreadyAnsweredQuestion(this.selectedQuestion._id);\n        if(this.alreadyCorrect) {this.feedback = \"You have already answered this question.\";}\n      },\n      err => {\n        console.error(\"Error getting question!\");\n        return Observable.throw(err);\n      },)\n\n\n\n    /*\n    this.selectedQuestion = this.courseSequenceQuestionService.getQuestionByID(questionID);\n\n    */\n\n  }\n\n  submitAnswer(event) {\n\n    let isCorrect:boolean = this.courseSequenceQuestionService.isAnswerCorrect(this.selectedQuestion,this.questionForm.value.answer);\n\n    if(isCorrect){\n      this.userService.addCorrectAnswer(this.selectedQuestion._id,this.questionForm.value.answer);\n      this.feedback=\"Right answer!\";\n      this.alreadyCorrect=true;}\n    else{this.feedback = \"Wrong answer - try again.\";}\n  }\n\n  backToSequence() : void {\n\n     this.router.navigate(['/student/sequence/'+this.courseSequenceQuestionService.currentSequence._id]);\n  }\n\n /* nextQuestion() : void {\n\n    alert(\"Forward\");\n\n  }   */\n\n}\n\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/question.component.ts","import { NgModule }       from '@angular/core';\nimport { Component,OnInit, Inject } from '@angular/core';\nimport { Question } from './model/question';\nimport { Sequence } from './model/sequence';\nimport { Course } from './model/course';\nimport { Router } from '@angular/router';\nimport { CourseSequenceQuestionService } from './course-sequence-question.service';\nimport { UserService } from './user.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Observable} from 'rxjs/Rx';\n\n\n@Component({\n  selector: 'question',\n  templateUrl: './question.edit.component.html',\n})\nexport class QuestionEditComponent implements OnInit{\n\n  constructor(private route: ActivatedRoute,\n              router : Router,\n              private userService : UserService,\n              private courseSequenceQuestionService: CourseSequenceQuestionService,\n              @Inject(FormBuilder) fb: FormBuilder) {\n    this.questionForm = fb.group({\n      answer: [\"\",[Validators.required]],\n    });\n    this.router = router;\n  }\n  title = 'LTC';\n  id: string;\n  questionForm: FormGroup;\n  questions : Question[];\n  selectedQuestion : Question;\n  feedback : String;\n  response: string;\n  alreadyCorrect: boolean = false;\n  router : Router;\n\n  ngOnInit() {\n    let questionID = this.route.snapshot.params['questionID'];\n\n    this.courseSequenceQuestionService.getQuestionByID(questionID).subscribe(\n      data => {\n        this.selectedQuestion = data;\n        this.courseSequenceQuestionService.currentQuestion=data;\n      },\n      err => {\n        console.error(\"Error getting question!\");\n        return Observable.throw(err);\n      },)\n\n  }\n\n  saveChanges():void {\n\n    this.courseSequenceQuestionService.updateQuestion(this.selectedQuestion).subscribe(\n      data => {\n        console.log(data);\n        this.response = data\n      },\n      err=> {\n        console.error(\"Error updating question\");\n        return Observable.throw(err);\n      },\n      () => {\n        this.router.navigate(['teacher/sequence/edit/'+this.courseSequenceQuestionService.currentSequence._id]);\n      }\n    )\n  }\n}\n\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/question.edit.component.ts","import { Component,OnInit,Inject } from '@angular/core';\nimport { Question } from './model/question';\nimport { Sequence } from './model/sequence';\nimport { Course } from './model/course';\nimport { CourseSequenceQuestionService } from './course-sequence-question.service';\nimport { UserService } from './user.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable} from 'rxjs/Rx';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\n\n@Component({\n  selector: 'sequence',\n  templateUrl: './sequence.component.html',\n})\n\nexport class SequenceComponent implements OnInit{\n\n  title = 'LTC';\n  courseID: number;\n  id: string;\n  response: string;\n  questionForm: FormGroup;\n\n  constructor(private route: ActivatedRoute,\n              private courseSequenceQuestionService: CourseSequenceQuestionService,\n              private userService: UserService,\n              @Inject(FormBuilder) fb: FormBuilder) {\n      this.questionForm = fb.group({\n      title:[\"\",[Validators.required]],\n  questionText: [\"\",[Validators.required]],\n        questionAnswer: [\"\",[Validators.required]],\n    });\n  }\n\n  sequences: Sequence[];\n  questions : Question[];\n  questionsToShow: Question[];\n  selectedSequence : Sequence;\n  selectedQuestion : Question;\n  newQuestion : Question;\n  newQuestionID : string;\n  myUserService : UserService;\n\n  ngOnInit() {\n\n    let sequenceID = this.route.snapshot.params['sequenceID'];\n\n  console.log(\"THe sequence ID is:\"+sequenceID);\n\n    this.courseSequenceQuestionService.getSequenceByID(sequenceID).subscribe(\n      data => {\n        console.log(\"Attempting to load seqeunce in ngInit\");\n        console.log(data);\n        this.selectedSequence = data;\n        this.courseSequenceQuestionService.currentSequence = data;\n      },\n      err => {\n        console.error(\"Error getting sequence!\");\n        return Observable.throw(err);\n      },\n      () => {\n        this.userService.currentSequenceID = this.selectedSequence._id;\n        this.userService.currentSequenceTitle = this.selectedSequence.sequenceTitle;\n\n        console.log(\"Attempting to load questions\");\n        this.courseSequenceQuestionService.getMultipleQuestions(this.selectedSequence.questions).subscribe(\n          data => {\n            console.log(\"Got data back\");\n            console.log(data);\n            this.questionsToShow = data\n          }\n        ),\n          err=> {\n            console.error(\"Error getting questions!\");\n            return Observable.throw(err);\n          }\n      })\n\n\n\n\n    /*this.selectedSequence = this.courseSequenceQuestionService.getSequenceByID(sequenceID);\n    this.questionsToShow = this.courseSequenceQuestionService.getQuestionsByID(this.selectedSequence.questions);*/\n    this.myUserService = this.userService;\n  }\n\n  createNewQuestion(): void {\n    this.newQuestion = new Question();\n  }\n\n  deleteQuestion(question): void {\n\n    this.courseSequenceQuestionService.deleteQuestion(question).subscribe(\n      data => this.response = data,\n      err => {\n        console.error(\"Error deleting question!\");\n        return Observable.throw(err);\n      },\n      () => {\n        this.courseSequenceQuestionService.getMultipleQuestions(this.selectedSequence.questions).subscribe(data => this.questionsToShow = data)\n      }\n    );\n}\n\n  submitNewQuestion(): void {\n\n    this.courseSequenceQuestionService.addQuestion(this.newQuestion).subscribe(\n      data => {\n        this.response = data;\n        console.log(data);\n        this.newQuestionID = data.questionID;\n      },\n      err => {\n        console.error(\"Error adding question!\");\n        return Observable.throw(err);\n      },\n      () => {\n\n        //TODO Case when sequence could not be created must be handled\n        this.selectedSequence.questions.push(this.newQuestionID);\n        this.courseSequenceQuestionService.updateSequence(this.selectedSequence).subscribe(\n          data => {\n            console.log(data);\n            this.response = data\n          },\n          err=> {\n            console.error(\"Error adding question to seqeunce\");\n            return Observable.throw(err);\n          },\n          () => {\n            this.courseSequenceQuestionService.getMultipleQuestions(this.selectedSequence.questions).subscribe(data => this.questionsToShow = data)\n            this.newQuestion=null;\n          }\n\n        )\n\n            }\n    );\n  }\n\n}\n\n\n\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/sequence.component.ts","import { Component,OnInit,Inject } from '@angular/core';\nimport { Question } from './model/question';\nimport { Sequence } from './model/sequence';\nimport { Course } from './model/course';\nimport { CourseSequenceQuestionService } from './course-sequence-question.service';\nimport { UserService } from './user.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable} from 'rxjs/Rx';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\n\n@Component({\n  selector: 'sequence',\n  templateUrl: './sequence.edit.component.html',\n})\n\nexport class SequenceEditComponent implements OnInit{\n\n  title = 'LTC';\n  courseID: number;\n  id: string;\n  response: string;\n  questionForm: FormGroup;\n\n  constructor(private route: ActivatedRoute,\n              private courseSequenceQuestionService: CourseSequenceQuestionService,\n              private userService: UserService,\n              @Inject(FormBuilder) fb: FormBuilder) {\n      this.questionForm = fb.group({\n      title:[\"\",[Validators.required]],\n  questionText: [\"\",[Validators.required]],\n        questionAnswer: [\"\",[Validators.required]],\n    });\n  }\n\n  sequences: Sequence[];\n  questions : Question[];\n  questionsToShow: Question[];\n  selectedSequence : Sequence;\n  selectedQuestion : Question;\n  newQuestion : Question;\n  newQuestionID : string;\n  myUserService : UserService;\n\n  ngOnInit() {\n\n    let sequenceID = this.route.snapshot.params['sequenceID'];\n  console.log(\"THe sequence ID is:\"+sequenceID);\n\n    this.courseSequenceQuestionService.getSequenceByID(sequenceID).subscribe(\n      data => {\n        console.log(\"Attempting to load seqeunce in ngInit\");\n        console.log(data);\n        this.selectedSequence = data;\n        this.courseSequenceQuestionService.currentSequence = data;\n      },\n      err => {\n        console.error(\"Error getting sequence!\");\n        return Observable.throw(err);\n      },\n      () => {\n        console.log(\"Attempting to load questions\");\n        this.courseSequenceQuestionService.getMultipleQuestions(this.selectedSequence.questions).subscribe(\n          data => {\n            console.log(\"Got data back\");\n            console.log(data);\n            this.questionsToShow = data\n          }\n        ),\n          err=> {\n            console.error(\"Error getting questions!\");\n            return Observable.throw(err);\n          }\n      })\n\n\n\n\n    /*this.selectedSequence = this.courseSequenceQuestionService.getSequenceByID(sequenceID);\n    this.questionsToShow = this.courseSequenceQuestionService.getQuestionsByID(this.selectedSequence.questions);*/\n    this.myUserService = this.userService;\n  }\n\n  createNewQuestion(): void {\n    this.newQuestion = new Question();\n    this.newQuestion.questionAnswer={text:'', javascript:'', csharp:''};\n  }\n\n  deleteQuestion(question): void {\n\n    this.courseSequenceQuestionService.deleteQuestion(question).subscribe(\n      data => this.response = data,\n      err => {\n        console.error(\"Error deleting question!\");\n        return Observable.throw(err);\n      },\n      () => {\n        this.courseSequenceQuestionService.getMultipleQuestions(this.selectedSequence.questions).subscribe(data => this.questionsToShow = data)\n      }\n    );\n}\n\n  submitNewQuestion(): void {\n\n    this.courseSequenceQuestionService.addQuestion(this.newQuestion).subscribe(\n      data => {\n        this.response = data;\n        console.log(data);\n        this.newQuestionID = data.questionID;\n      },\n      err => {\n        console.error(\"Error adding question!\");\n        return Observable.throw(err);\n      },\n      () => {\n\n        //TODO Case when sequence could not be created must be handled\n        this.selectedSequence.questions.push(this.newQuestionID);\n        this.courseSequenceQuestionService.updateSequence(this.selectedSequence).subscribe(\n          data => {\n            console.log(data);\n            this.response = data\n          },\n          err=> {\n            console.error(\"Error adding question to seqeunce\");\n            return Observable.throw(err);\n          },\n          () => {\n            this.courseSequenceQuestionService.getMultipleQuestions(this.selectedSequence.questions).subscribe(data => this.questionsToShow = data)\n            this.newQuestion=null;\n          }\n\n        )\n\n            }\n    );\n  }\n\n  reloadDisplay(): void {\n    this.courseSequenceQuestionService.getMultipleQuestions(this.selectedSequence.questions).subscribe(\n      data => {\n        console.log(data);\n        this.questionsToShow = data\n      }\n    ),\n      err=> {\n        console.error(\"Error getting questions!\");\n        return Observable.throw(err);\n      }\n\n  }\n\n  saveChanges():void {\n\n    this.courseSequenceQuestionService.updateSequence(this.selectedSequence).subscribe(\n      data => {\n        console.log(data);\n        this.response = data\n      },\n      err=> {\n        console.error(\"Error updating sequence\");\n        return Observable.throw(err);\n      },\n      () => {\n       // this.reloadDisplay();\n      }\n\n    )\n  }\n\n}\n\n\n\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/sequence.edit.component.ts","import { Component } from '@angular/core';\nimport { Question } from '../model/question';\nimport { Sequence } from '../model/sequence';\nimport { Course } from '../model/course';\nimport { CourseSequenceQuestionService } from '../course-sequence-question.service';\nimport { UserService } from  '../user.service';\nimport {User} from '../model/user';\nimport { OnInit } from '@angular/core';\n\n@Component({\n  selector: 'student',\n  templateUrl: 'student.component.html',\n})\n\nexport class StudentComponent implements OnInit  {\n\n  questions : Question[];\n  sequences : Sequence[];\n  courses : Course[];\n  user : User;\n\n  constructor(private courseSequenceQuestionService: CourseSequenceQuestionService, private userService: UserService) { }\n\n  ngOnInit(): void {\n    this.user = this.userService.getCurrentUser();\n    this.courseSequenceQuestionService.getAllCourses().subscribe(data => this.courses = data);\n  }\n\n  title = 'LTC';\n\n  selectedQuestion : Question;\n  selectedSequence : Sequence;\n  selectedCourse : Course;\n\n  onSelectQuestion(question: Question): void {\n    this.selectedQuestion = question;\n  }\n\n  onSelectSequence(sequence: Sequence): void {\n    this.selectedSequence = sequence;\n  }\n\n  onSelectCourse(course: Course): void {\n    this.selectedCourse = course;\n  }\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/student/student.component.ts","import { Component, Inject } from '@angular/core';\nimport { Question } from '../model/question';\nimport { Sequence } from '../model/sequence';\nimport { Course } from '../model/course';\nimport { CourseSequenceQuestionService } from '../course-sequence-question.service';\nimport { UserService } from  '../user.service';\nimport {User} from '../model/user';\nimport { OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {Observable} from 'rxjs/Rx';\n\n\n@Component({\n  selector: 'teacher',\n  templateUrl: 'teacher.component.html',\n})\n\nexport class TeacherComponent implements OnInit{\n\n\n  questions: Question[];\n  sequences: Sequence[];\n  courses :Course[];\n  user: User;\n  courseForm: FormGroup;\n  response: String;\n  userService: UserService;\n\n  constructor(private route: ActivatedRoute,\n              userService : UserService,\n              private courseSequenceQuestionService: CourseSequenceQuestionService,\n              @Inject(FormBuilder) fb: FormBuilder) {\n    this.courseForm = fb.group({\n      title:[\"\",[Validators.required]],\n      description: [\"\",[Validators.required]],\n    });\n    this.userService = userService;\n  }\n\n  ngOnInit(): void {\n    if(!this.userService.isUserLoggedIn){ this.userService.logOut();}\n    this.user = this.userService.getCurrentUser();\n    this.courseSequenceQuestionService.getAllCourses().subscribe(data => this.courses = data);\n  }\n\n  selectedCourse : Course;\n  newCourse : Course;\n  error : string;\n\n  onSelect(course: Course): void {\n    this.courseSequenceQuestionService.addCourse(this.newCourse).subscribe(data => this.response = data);\n  }\n\n  onDelete(course: Course): void {\n\n    this.courseSequenceQuestionService.deleteCourse(course).subscribe(\n      data => this.response = data,\n      err => {\n        console.error(\"Error deleting course!\");\n        return Observable.throw(err);\n      },\n      () => this.courseSequenceQuestionService.getAllCourses().subscribe(data => this.courses = data)\n      );\n\n  }\n\n  createNewCourse(): void {\n   this.newCourse = {_id:null,courseTitle:'',courseDescription:'',sequences:[],created_at:null};\n  }\n\n  submitNewCourse(): void{\n\n    this.courseSequenceQuestionService.addCourse(this.newCourse).subscribe(\n         data => {\n        this.response = data;\n        this.newCourse = null;\n      },\n          err => {\n            console.error(\"Error adding course!\");\n            return Observable.throw(err);\n          },\n          () => this.courseSequenceQuestionService.getAllCourses().subscribe(data => this.courses = data)\n\n  );\n\n  }\n\n  addQuestion(question): void {\n   /* console.log(\"Trying to add question\");\n    console.log(question);\n    QUESTIONS.push(question);\n    this.selectedQuestion = null;*/\n  }\n\n  deleteQuestion(question): void {\n  /*  let index: number = QUESTIONS.indexOf(question);\n    if (index !== -1) {\n      QUESTIONS.splice(index, 1);\n    }*/\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/teacher/teacher.component.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","module.exports = \"<h1> Learn To Code.</h1>\\n<p>Some form of LMS/testing app based on Angular/NodeJS.</p>\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/about/about.component.html\n// module id = 310\n// module chunks = 1","module.exports = \"<nav class=\\\"navbar navbar-toggleable-md navbar-light bg-faded navbar-fixed-top\\\">\\n  <button class=\\\"navbar-toggler navbar-toggler-right\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarSupportedContent\\\" aria-controls=\\\"navbarSupportedContent\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\n  </button>\\n  <a class=\\\"navbar-brand\\\" routerLink=\\\"/home\\\" routerLinkActive=\\\"active\\\">LTC</a>\\n\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarSupportedContent\\\">\\n    <ul class=\\\"navbar-nav mr-auto\\\">\\n      <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\"routerLink=\\\"/login\\\" routerLinkActive=\\\"active\\\">Log In</a></li>\\n      <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" routerLink=\\\"/about\\\" routerLinkActive=\\\"active\\\" >About</a></li>\\n    </ul>\\n    <form class=\\\"form-inline my-2 my-lg-0\\\">\\n      <div *ngIf=\\\"userService.isUserLoggedIn; else elseBlock\\\">\\n       <!-- <a class=\\\"nav-link\\\" >{{userService.user.local.name}}</a> -->\\n\\n        <a class=\\\"nav-link\\\" href=\\\"#\\\" (click)=\\\"logOut(); return;\\\"><md-icon>exit_to_app</md-icon>Log out</a>\\n      </div>\\n\\n      <ng-template #elseBlock>\\n        Not logged in\\n      </ng-template>\\n      <!--<input class=\\\"form-control mr-sm-2\\\" type=\\\"text\\\" placeholder=\\\"Search\\\">\\n      <button class=\\\"btn btn-outline-success my-2 my-sm-0\\\" type=\\\"submit\\\">Search</button>-->\\n    </form>\\n  </div>\\n</nav>\\n  <div id=\\\"topContainer\\\" class=\\\"container\\\">\\n    <router-outlet></router-outlet>\\n  </div>\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = 311\n// module chunks = 1","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-6\\\">\\n    <h2 *ngIf=\\\"selectedCourse\\\">Course: {{selectedCourse.courseTitle}}</h2>\\n    <p *ngIf=\\\"selectedCourse\\\">{{selectedCourse.courseDescription}}</p>\\n\\n  </div>\\n\\n  <div class=\\\"col-6\\\">\\n    <h2>Sequences</h2>\\n    <div *ngFor=\\\"let sequence of sequencesToShow\\\">\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\">{{sequence.sequenceTitle}}</div>\\n        <div class=\\\"card-block\\\">\\n            <p>{{sequence.sequenceDescription}}</p>\\n          <button  [routerLink]=\\\"['/student/sequence', sequence._id]\\\" class=\\\"btn btn-primary\\\"  [class.selected]=\\\"sequence === selectedCourse\\\">View</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n\\n\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/course.component.html\n// module id = 312\n// module chunks = 1","module.exports = \"<div class=\\\"row\\\">\\n  <a *ngIf=\\\"selectedCourse\\\" [routerLink]=\\\"['/teacher/course/edit/'+this.courseSequenceQuestionService.currentCourse._id]\\\">Course:{{this.courseSequenceQuestionService.currentCourse.courseTitle}}</a>\\n</div>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-3\\\">\\n   <h3>Course</h3>\\n    <form>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"title\\\">Title:</label>\\n      <input  *ngIf=\\\"selectedCourse\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"course-title\\\" required name=\\\"title\\\" [(ngModel)]=\\\"selectedCourse.courseTitle\\\">\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"description\\\">Description:</label>\\n      <textarea  *ngIf=\\\"selectedCourse\\\"type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"course-description\\\" required name=\\\"description\\\" [(ngModel)]=\\\"selectedCourse.courseDescription\\\"></textarea>\\n      </div>\\n      <button  class=\\\"btn btn-primary\\\" (click)=\\\"saveChanges();return;\\\">Save Changes</button>\\n    </form>\\n  </div>\\n\\n  <div class=\\\"col-9\\\">\\n    <h3>Sequences</h3>\\n    <table class=\\\"table\\\">\\n      <thead class=\\\"thead-inverse\\\">\\n      <tr>\\n        <th>Title</th>\\n        <th>Description</th>\\n        <th>Creation Date</th>\\n        <th></th>\\n        <th></th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr *ngFor=\\\"let sequence of sequencesToShow\\\">\\n        <td>{{sequence.sequenceTitle}}</td>\\n        <td>{{sequence.sequenceDescription}}</td>\\n        <td>{{sequence.created}}</td>\\n        <td> <md-icon [routerLink]=\\\"['/teacher/sequence/edit', sequence._id]\\\">edit</md-icon></td>\\n        <td> <md-icon (click)=\\\"onDelete(sequence);return;\\\">delete</md-icon></td>\\n      </tr>\\n      </tbody>\\n    </table>\\n    <button class=\\\"btn btn-success\\\"  (click)=\\\"createNewSequence();return;\\\">+Add new sequence</button>\\n\\n    <div *ngIf=\\\"newSequence\\\">\\n    <h2>Add new sequence</h2>\\n    <form [formGroup]=\\\"sequenceForm\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"title\\\">Title:</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"title\\\" required name=\\\"title\\\" formControlName=\\\"title\\\" [(ngModel)]=\\\"newSequence.sequenceTitle\\\">\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"description\\\">Description:</label>\\n        <textarea formControlName=\\\"description\\\" name=\\\"description\\\" class=\\\"form-control\\\" id=\\\"description\\\" rows=\\\"3\\\" [(ngModel)]=\\\"newSequence.sequenceDescription\\\"></textarea>\\n      </div>\\n      <button type=\\\"submit\\\" class=\\\"btn btn-success\\\"  (click)=\\\"submitNewSequence();return;\\\">Create</button>\\n    </form>\\n\\n\\n  </div>\\n  </div>\\n\\n\\n\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/course.edit.component.html\n// module id = 313\n// module chunks = 1","module.exports = \"<div class=\\\"jumbotron\\\">\\n  <h1>Learn To Code!</h1>\\n  <p>This is a prototype of the Learn To Code app which is under development.</p>\\n  <p>There is now interaction (albeit shakey) between client and server.</p>\\n  <p>Additionally, the question/answer framework which is currently in use does not require code submission, but is instead based on simple\\n  one word answers.</p>\\n  <p>You will need to login as a teacher to create courses, sequences and questions.</p>\\n  <p>You will need to login as a student to answer questions.</p>\\n  <p>Example login details are given on the login page.</p>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/home.component.html\n// module id = 314\n// module chunks = 1","module.exports = \"<!--Pulling Awesome Font -->\\n<link href=\\\"//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css\\\" rel=\\\"stylesheet\\\">\\n\\n<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-5\\\"></div>\\n    <div class=\\\"col-md-3\\\">\\n      <div class=\\\"form-login\\\">\\n        <h4>Welcome.</h4>\\n        <input  *ngIf=\\\"tempUser\\\" type=\\\"text\\\" id=\\\"userName\\\" class=\\\"form-control input-sm chat-input\\\" placeholder=\\\"username\\\" [(ngModel)]=\\\"tempUser.local.username\\\"/>\\n        <p></p>\\n        <input type=\\\"text\\\"  *ngIf=\\\"tempUser\\\" id=\\\"userPassword\\\" class=\\\"form-control input-sm chat-input\\\" placeholder=\\\"password\\\" [(ngModel)]=\\\"tempUser.local.password\\\"/>\\n        <p></p>\\n        <div class=\\\"wrapper\\\">\\n            <span class=\\\"group-btn\\\">\\n                <button class=\\\"btn btn-primary btn-md\\\" (click)=\\\"doLogIn();return;\\\">login <i class=\\\"fa fa-sign-in\\\"></i></button>\\n            </span>\\n          <p></p>\\n          <h4>Example teacher:</h4>\\n          <p>Username: teacher, Password: teacher</p>\\n          <h4>Example student:</h4>\\n          <p>Username: student, Password: student</p>\\n\\n        </div>\\n      </div>\\n\\n    </div>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/login/login.component.html\n// module id = 315\n// module chunks = 1","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-9\\\">\\n    <div *ngIf=\\\"selectedQuestion\\\">\\n      <h2>{{selectedQuestion.questionTitle}}</h2>\\n\\n      <div *ngIf=\\\"alreadyCorrect; then alreadyCorrectContent else notAlreadyCorrectContent\\\"></div>\\n    </div>\\n      <ng-template #alreadyCorrectContent><p>Answer: {{selectedQuestion.questionAnswer.text}}</p></ng-template>\\n\\n\\n    <ng-template #notAlreadyCorrectContent>\\n      <form [formGroup]=\\\"questionForm\\\" (ngSubmit)=\\\"submitAnswer($event)\\\">\\n      <div class=\\\"form-group\\\">\\n        {{selectedQuestion.questionText}}\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"exampleTextarea\\\">Your answer:</label>\\n        <textarea formControlName=\\\"answer\\\" class=\\\"form-control\\\" id=\\\"answer\\\" rows=\\\"3\\\"></textarea>\\n      </div>\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n      </form>\\n    </ng-template>\\n\\n    <div *ngIf=\\\"feedback\\\">\\n      <p>{{feedback}}</p>\\n      <button (click)=\\\"backToSequence(); return;\\\" class=\\\"btn btn-primary\\\">Back to sequence</button>\\n   <!--   <button (click)=\\\"nextQuestion(); return;\\\" class=\\\"btn btn-primary\\\">Next question</button>-->\\n    </div>\\n  </div>\\n\\n\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/question.component.html\n// module id = 316\n// module chunks = 1","module.exports = \"<div class=\\\"row\\\">\\n  <a *ngIf=\\\"this.courseSequenceQuestionService.currentCourse\\\" [routerLink]=\\\"['/teacher/course/edit/'+this.courseSequenceQuestionService.currentCourse._id]\\\">Course:{{this.courseSequenceQuestionService.currentCourse.courseTitle}}</a> >\\n  <a *ngIf=\\\"this.courseSequenceQuestionService.currentSequence\\\" [routerLink]=\\\"['/teacher/sequence/edit/'+this.courseSequenceQuestionService.currentSequence._id]\\\">Sequence:{{this.courseSequenceQuestionService.currentSequence.sequenceTitle}}</a> >\\n  <a *ngIf=\\\"this.courseSequenceQuestionService.currentQuestion\\\" [routerLink]=\\\"['/teacher/question/edit/'+this.courseSequenceQuestionService.currentQuestion._id]\\\">Question:{{this.courseSequenceQuestionService.currentQuestion.questionTitle}}</a>\\n</div>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-9\\\">\\n    <h2>Question</h2>\\n    <form>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"question-title\\\">Title:</label>\\n        <input  *ngIf=\\\"selectedQuestion\\\"type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"question-title\\\" required name=\\\"title\\\" [(ngModel)]=\\\"selectedQuestion.questionTitle\\\">\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"question-text\\\">Text:</label>\\n        <textarea  *ngIf=\\\"selectedQuestion\\\"type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"question-text\\\" required name=\\\"text\\\" [(ngModel)]=\\\"selectedQuestion.questionText\\\"></textarea>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"question-text\\\">Answer:</label>\\n        <textarea  *ngIf=\\\"selectedQuestion\\\"type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"question-answer\\\" required name=\\\"answer\\\" [(ngModel)]=\\\"selectedQuestion.questionAnswer.text\\\"></textarea>\\n      </div>\\n      <button  class=\\\"btn btn-primary\\\" (click)=\\\"saveChanges();return;\\\">Save Changes</button>\\n    </form>\\n    <div *ngIf=\\\"selectedQuestion\\\">\\n  </div>\\n\\n\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/question.edit.component.html\n// module id = 317\n// module chunks = 1","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-6\\\">\\n    <h2 *ngIf=\\\"selectedSequence\\\">Sequence: {{selectedSequence.sequenceTitle}}</h2>\\n    <p *ngIf=\\\"selectedSequence\\\">Description: {{selectedSequence.sequenceDescription}}</p>\\n\\n  </div>\\n\\n  <div class=\\\"col-6\\\">\\n    <h3>Questions</h3>\\n    <div *ngFor=\\\"let question of questionsToShow\\\">\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\">{{question.questionTitle}}</div>\\n        <div class=\\\"card-block\\\">\\n          <div *ngIf=\\\"myUserService.hasUserAlreadyAnsweredQuestion(question._id); then answeredContent else notAnsweredContent\\\"></div>\\n             <ng-template #answeredContent><p>This question has been answered correctly<md-icon layout-align=\\\"center end\\\">done</md-icon></p></ng-template>\\n             <ng-template #notAnsweredContent><p>This answer has not been answered correctly</p>\\n               <button  [routerLink]=\\\"['/student/question', question._id]\\\" class=\\\"btn btn-primary\\\"  [class.selected]=\\\"sequence === selectedCourse\\\">Answer</button>\\n             </ng-template>\\n             </div>\\n         </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n\\n\\n\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/sequence.component.html\n// module id = 318\n// module chunks = 1","module.exports = \"<div class=\\\"row\\\">\\n  <a *ngIf=\\\"this.courseSequenceQuestionService.currentCourse\\\" [routerLink]=\\\"['/teacher/course/edit/'+this.courseSequenceQuestionService.currentCourse._id]\\\">Course:{{this.courseSequenceQuestionService.currentCourse.courseTitle}}</a> >\\n  <a *ngIf=\\\"selectedSequence\\\" [routerLink]=\\\"['/teacher/sequence/edit/'+this.courseSequenceQuestionService.currentSequence._id]\\\">Sequence:{{this.courseSequenceQuestionService.currentSequence.sequenceTitle}}</a>\\n\\n</div>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-3\\\">\\n    <h3>Sequence</h3>\\n    <form>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"title\\\">Title:</label>\\n      <input  *ngIf=\\\"selectedSequence\\\"type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"sequence-title\\\" required name=\\\"title\\\" [(ngModel)]=\\\"selectedSequence.sequenceTitle\\\">\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"description\\\">Description:</label>\\n      <textarea  *ngIf=\\\"selectedSequence\\\"type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"sequence-description\\\" required name=\\\"description\\\" [(ngModel)]=\\\"selectedSequence.sequenceDescription\\\"></textarea>\\n    </div>\\n    <button  class=\\\"btn btn-primary\\\" (click)=\\\"saveChanges();return;\\\">Save Changes</button>\\n  </form>\\n\\n\\n  </div>\\n\\n  <div class=\\\"col-9\\\">\\n  <h3>Questions</h3>\\n    <table class=\\\"table\\\">\\n      <thead class=\\\"thead-inverse\\\">\\n      <tr>\\n        <th>Title</th>\\n        <th>Question Text</th>\\n        <th>Creation Date</th>\\n        <th></th>\\n        <th></th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr *ngFor=\\\"let question of questionsToShow\\\">\\n        <td>{{question.questionTitle}}</td>\\n        <td>{{question.questionText}}</td>\\n        <td>{{question.created_at}}</td>\\n        <td> <md-icon [routerLink]=\\\"['/teacher/question/edit', question._id]\\\">edit</md-icon></td>\\n        <td> <md-icon (click)=\\\"deleteQuestion(question);return;\\\">delete</md-icon></td>\\n      </tr>\\n      </tbody>\\n    </table>\\n\\n\\n    <button class=\\\"btn btn-success\\\"  (click)=\\\"createNewQuestion();return;\\\"  >+Add new question</button>\\n    <div *ngIf=\\\"newQuestion\\\">\\n      <h2>Add new question</h2>\\n      <form [formGroup]=\\\"questionForm\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"title\\\">Title:</label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"title\\\" required name=\\\"title\\\" formControlName=\\\"title\\\" [(ngModel)]=\\\"newQuestion.questionTitle\\\">\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"questionText\\\">Question Text:</label>\\n          <textarea formControlName=\\\"questionText\\\" name=\\\"questionText\\\" class=\\\"form-control\\\" id=\\\"questionText\\\" rows=\\\"3\\\" [(ngModel)]=\\\"newQuestion.questionText\\\"></textarea>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"questionAnswer\\\">Answer:</label>\\n          <textarea formControlName=\\\"questionAnswer\\\" name=\\\"questionAnswer\\\" class=\\\"form-control\\\" id=\\\"questionAnswer\\\" rows=\\\"3\\\" [(ngModel)]=\\\"newQuestion.questionAnswer.text\\\"></textarea>\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" (click)=\\\"submitNewQuestion();return;\\\">Create</button>\\n      </form>\\n\\n\\n    </div>\\n\\n\\n\\n\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/sequence.edit.component.html\n// module id = 319\n// module chunks = 1","module.exports = \"<h1>Student</h1>\\n\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-9\\\">\\n    <h3>Welcome {{user.local.firstName}}.</h3>\\n    <p> To the right you can see the courses in which you are currently enrolled. To choose one, please click on \\\"view\\\".</p>\\n    <div *ngIf=\\\"user.results.length<1; then noResultsContent else resultsContent\\\"></div>\\n    <ng-template #noResultsContent><p>You currently have no results to show.</p></ng-template>\\n    <ng-template #resultsContent>\\n      <h2>Your results:</h2>\\n          <table class=\\\"table\\\">\\n            <thead>\\n            <tr>\\n              <th>Course Title</th>\\n              <th>Sequence Title</th>\\n              <th>Question Title</th>\\n              <th>Date</th>\\n            </tr>\\n            </thead>\\n            <tbody>\\n            <tr *ngFor=\\\"let result of user.results\\\" >\\n              <td>{{result.courseTitle}}</td>\\n              <td>{{result.sequenceTitle}}</td>\\n              <td>{{result.questionTitle}}</td>\\n              <td>{{result.dateTime.toString()}}</td>\\n            </tr>\\n            </tbody>\\n          </table>\\n    </ng-template>\\n    </div>\\n  <div class=\\\"col-lg-3\\\">\\n    <h2>Courses</h2>\\n    <div *ngFor=\\\"let course of courses\\\"  class=\\\"card\\\" >\\n      <div class=\\\"card-header\\\">{{course.courseTitle}}</div>\\n      <div class=\\\"card-block\\\">\\n        <!--<h4 class=\\\"card-title\\\">{{course.courseTitle}}</h4>-->\\n        <p>{{course.courseDescription}}</p>\\n        <button  [routerLink]=\\\"['/student/course', course._id]\\\" class=\\\"btn btn-primary\\\"  [class.selected]=\\\"course === selectedCourse\\\">View</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/student/student.component.html\n// module id = 320\n// module chunks = 1","module.exports = \"<div class=\\\"row\\\">\\n\\n  <div class=\\\"col-3\\\">\\n    <h3 *ngIf=\\\"userService.isUserLoggedIn\\\">Welcome {{userService.user.local.firstName}}</h3>\\n    <p>To the right you can see the courses you have created so far.</p>\\n    <button class=\\\"btn btn-success\\\"  (click)=\\\"createNewCourse();return;\\\" >+Add new course</button>\\n\\n\\n    <div *ngIf=\\\"selectedcourse\\\">\\n      <h2>Edit course</h2>\\n      <form>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"courseTitle\\\">Title:</label>\\n          <input id=\\\"courseTitle\\\"  name=\\\"courseTitle\\\" [(ngModel)]=\\\"selectedcourse.courseTitle\\\"/>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"courseText\\\">course:</label>\\n          <textarea class=\\\"form-control\\\" id=\\\"courseText\\\" rows=\\\"3\\\" name=\\\"courseText\\\" [(ngModel)]=\\\"selectedcourse.courseText\\\"></textarea>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"answer\\\">Answer:</label>\\n          <textarea class=\\\"form-control\\\" id=\\\"answer\\\" rows=\\\"3\\\" name=\\\"answer\\\" [(ngModel)]=\\\"selectedcourse.courseAnswer\\\"></textarea>\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\n      </form>\\n    </div>\\n\\n</div>\\n  <div class=\\\"col-9\\\">\\n  <h3>Courses</h3>\\n    <table class=\\\"table\\\">\\n      <thead class=\\\"thead-inverse\\\">\\n      <tr>\\n        <th>Title</th>\\n        <th>Description</th>\\n        <th>Creation Date</th>\\n        <th></th>\\n        <th></th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr *ngFor=\\\"let course of courses\\\">\\n        <td>{{course.courseTitle}}</td>\\n        <td>{{course.courseDescription}}</td>\\n        <td>{{course.created_at}}</td>\\n        <td> <md-icon [routerLink]=\\\"['/teacher/course/edit', course._id]\\\">edit</md-icon></td>\\n        <td> <md-icon (click)=\\\"onDelete(sequence);return;\\\">delete</md-icon></td>\\n      </tr>\\n      </tbody>\\n    </table>\\n\\n    <div *ngIf=\\\"newCourse\\\">\\n      <h2>Add new course</h2>\\n      <form [formGroup]=\\\"courseForm\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"title\\\">Title:</label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"title\\\" required name=\\\"title\\\" formControlName=\\\"title\\\" [(ngModel)]=\\\"newCourse.courseTitle\\\">\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"description\\\">Description:</label>\\n          <textarea formControlName=\\\"description\\\" name=\\\"description\\\" class=\\\"form-control\\\" id=\\\"description\\\" rows=\\\"3\\\" [(ngModel)]=\\\"newCourse.courseDescription\\\"></textarea>\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-success\\\"  (click)=\\\"submitNewCourse();return;\\\">Create</button>\\n      </form>\\n\\n\\n    </div>\\n<!--\\n    <div *ngFor=\\\"let course of courses\\\"  class=\\\"card\\\" >\\n      <div class=\\\"card-header\\\">course</div>\\n      <div class=\\\"card-block\\\">\\n        <h4 class=\\\"card-title\\\">{{course.courseTitle}}</h4>\\n        <p class=\\\"card-text\\\">{{course.courseDescription}}</p>\\n        <button  [routerLink]=\\\"['/teacher/course/edit', course._id]\\\" class=\\\"btn btn-primary\\\" >Edit</button>\\n        <button  class=\\\"btn btn-danger\\\" (click)=\\\"onDelete(course);return;\\\">Delete</button>\\n      </div>\\n    </div>\\n    -->\\n  </div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/teacher/teacher.component.html\n// module id = 321\n// module chunks = 1","export class User {\n  _id: string;\n  local: {\n    userType: string;\n    firstName: string;\n    username: string;\n    password: string;\n    lastName: string;\n  };\n   results: Result[];\n}\n\nexport class Result {\n  _id: string;\n  type: string;\n  dateTime: number;\n  answer: string;\n  courseID: string;\n  sequenceID : string;\n  questionID : string;\n  courseTitle: string;\n  sequenceTitle: string;\n  questionTitle: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/model/user.ts"],"sourceRoot":""}